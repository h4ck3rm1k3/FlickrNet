// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using FlickrNet;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;
using System.IO;
namespace FlickrNetTest
{
    /// <summary>
    ///This is a test class for FlickrNet.Utils and is intended
    ///to contain all FlickrNet.Utils Unit Tests
    ///</summary>
    [TestClass()]
    public class UtilsTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for DateToUnixTimestamp (DateTime)
        ///</summary>
        [TestMethod()]
        public void DateToUnixTimestampTest()
        {
            DateTime date = new DateTime(); // TODO: Initialize to an appropriate value

            long expected = 0;
            long actual;

            actual = FlickrNet.Utils.DateToUnixTimestamp(date);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.DateToUnixTimestamp did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Deserialize (string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void DeserializeTest()
        {
            string responseString = null; // TODO: Initialize to an appropriate value

            Response expected = null;
            Response actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.Deserialize(responseString);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.Deserialize did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Deserialize (System.Xml.XmlNode, Type)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void DeserializeTest1()
        {
            XmlNode node = null; // TODO: Initialize to an appropriate value

            Type type = null; // TODO: Initialize to an appropriate value

            object expected = null;
            object actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.Deserialize(node, type);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.Deserialize did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ExtrasToString (PhotoSearchExtras)
        ///</summary>
        [TestMethod()]
        public void ExtrasToStringTestNoExtras()
        {
            PhotoSearchExtras extras = PhotoSearchExtras.None; // TODO: Initialize to an appropriate value

            string expected = String.Empty;
            string actual;

            actual = FlickrNet.Utils.ExtrasToString(extras);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ExtrasToString did not return the expected value.");
        }

        [TestMethod()]
        public void ExtrasToStringTestTags()
        {
            PhotoSearchExtras extras = PhotoSearchExtras.Tags; // TODO: Initialize to an appropriate value

            string expected = "tags";
            string actual;

            actual = FlickrNet.Utils.ExtrasToString(extras);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ExtrasToString did not return the expected value.");
        }

        [TestMethod()]
        public void ExtrasToStringTestMultiple()
        {
            PhotoSearchExtras extras = PhotoSearchExtras.Tags | PhotoSearchExtras.OriginalFormat; // TODO: Initialize to an appropriate value

            string expected = "original_format,tags";
            string actual;

            actual = FlickrNet.Utils.ExtrasToString(extras);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ExtrasToString did not return the expected value.");
        }

        /// <summary>
        ///A test for GetSerializer (Type)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void GetSerializerTest()
        {
            Type type = null; // TODO: Initialize to an appropriate value

            XmlSerializer expected = null;
            XmlSerializer actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.GetSerializer(type);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.GetSerializer did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for MemberTypeToString (MemberType)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void MemberTypeToStringTest()
        {
            MemberType memberTypes = MemberType.NotSpecified; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.MemberTypeToString(memberTypes);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.MemberTypeToString did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ParseIdToMemberType (string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void ParseIdToMemberTypeTest()
        {
            string memberTypeId = null; // TODO: Initialize to an appropriate value

            MemberType expected = MemberType.NotSpecified;
            MemberType actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.ParseIdToMemberType(memberTypeId);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ParseIdToMemberType did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for PartialOptionsIntoArray (PartialSearchOptions, Hashtable)
        ///</summary>
        [TestMethod()]
        public void PartialOptionsIntoArrayTest()
        {
            PartialSearchOptions options = null; // TODO: Initialize to an appropriate value

            Hashtable parameters = null; // TODO: Initialize to an appropriate value

            FlickrNet.Utils.PartialOptionsIntoArray(options, parameters);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ReadAsciiString (Stream)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void ReadAsciiStringTest()
        {
            Stream s = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.ReadAsciiString(s);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ReadAsciiString did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ReadInt32 (Stream)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void ReadInt32Test()
        {
            Stream s = null; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.ReadInt32(s);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ReadInt32 did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ReadString (Stream)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void ReadStringTest()
        {
            Stream s = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.ReadString(s);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ReadString did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for SortOrderToString (PhotoSearchSortOrder)
        ///</summary>
        [TestMethod()]
        public void SortOrderToStringTest()
        {
            PhotoSearchSortOrder order = PhotoSearchSortOrder.None; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNet.Utils.SortOrderToString(order);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.SortOrderToString did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UnixTimestampToDate (long)
        ///</summary>
        [TestMethod()]
        public void UnixTimestampToDateTest()
        {
            long timestamp = 0; // TODO: Initialize to an appropriate value

            DateTime expected = new DateTime();
            DateTime actual;

            actual = FlickrNet.Utils.UnixTimestampToDate(timestamp);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UnixTimestampToDate did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UnixTimestampToDate (string)
        ///</summary>
        [TestMethod()]
        public void UnixTimestampToDateTest1()
        {
            string timestamp = null; // TODO: Initialize to an appropriate value

            DateTime expected = new DateTime();
            DateTime actual;

            actual = FlickrNet.Utils.UnixTimestampToDate(timestamp);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UnixTimestampToDate did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestEmpty()
        {
            string data = String.Empty;

            string expected = String.Empty;
            string actual;

            actual = FlickrNet.Utils.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestAmpersand()
        {
            string data = "A&B";

            string expected = "A%26B";
            string actual;

            actual = FlickrNet.Utils.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestPlus()
        {
            string data = "A+B";

            string expected = "A%2BB";
            string actual;

            actual = FlickrNet.Utils.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestSpace()
        {
            string data = "A B";

            string expected = "A%20B";
            string actual;

            actual = FlickrNet.Utils.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlFormat (Photo, string, string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void UrlFormatTest()
        {
            Photo p = null; // TODO: Initialize to an appropriate value

            string size = null; // TODO: Initialize to an appropriate value

            string format = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.UrlFormat(p, size, format);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlFormat did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UrlFormat (PhotoInfo, string, string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void UrlFormatTest1()
        {
            PhotoInfo p = null; // TODO: Initialize to an appropriate value

            string size = null; // TODO: Initialize to an appropriate value

            string format = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.UrlFormat(p, size, format);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlFormat did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UrlFormat (Photoset, string, string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void UrlFormatTest2()
        {
            Photoset p = null; // TODO: Initialize to an appropriate value

            string size = null; // TODO: Initialize to an appropriate value

            string format = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.UrlFormat(p, size, format);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlFormat did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UrlFormat (string, params object[])
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void UrlFormatTest3()
        {
            string format = null; // TODO: Initialize to an appropriate value

            object[] parameters = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = FlickrNetTest.FlickrNet_UtilsAccessor.UrlFormat(format, parameters);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlFormat did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Utils ()
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void ConstructorTest()
        {
            Utils target = FlickrNetTest.FlickrNet_UtilsAccessor.CreatePrivate();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for WriteAsciiString (Stream, string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void WriteAsciiStringTest()
        {
            Stream s = null; // TODO: Initialize to an appropriate value

            string str = null; // TODO: Initialize to an appropriate value

            FlickrNetTest.FlickrNet_UtilsAccessor.WriteAsciiString(s, str);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WriteInt32 (Stream, int)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void WriteInt32Test()
        {
            Stream s = null; // TODO: Initialize to an appropriate value

            int i = 0; // TODO: Initialize to an appropriate value

            FlickrNetTest.FlickrNet_UtilsAccessor.WriteInt32(s, i);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WriteString (Stream, string)
        ///</summary>
        [DeploymentItem("FlickrNet.dll")]
        [TestMethod()]
        public void WriteStringTest()
        {
            Stream s = null; // TODO: Initialize to an appropriate value

            string str = null; // TODO: Initialize to an appropriate value

            FlickrNetTest.FlickrNet_UtilsAccessor.WriteString(s, str);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
