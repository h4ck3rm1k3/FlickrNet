// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using FlickrNet;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;
using System.IO;
namespace FlickrNetTest
{
    /// <summary>
    ///This is a test class for FlickrNet.Utils and is intended
    ///to contain all FlickrNet.Utils Unit Tests
    ///</summary>
    [TestClass()]
    public class UtilsTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        [TestMethod()]
        public void TestUnixTimestampToDateString()
        {
            DateTime returnedDate = UtilityMethods.UnixTimestampToDate("1230813420");
            DateTime expectedDate = new DateTime(2009, 1, 1, 12, 37, 0);

            Assert.AreEqual(expectedDate, returnedDate);
        }

        [TestMethod()]
        public void TestUnixTimestampToDateLong()
        {
            DateTime returnedDate = UtilityMethods.UnixTimestampToDate(1230813420);
            DateTime expectedDate = new DateTime(2009, 1, 1, 12, 37, 0);

            Assert.AreEqual(expectedDate, returnedDate);
        }

        [TestMethod()]
        public void TestDateToUnixTimestamp()
        {
            DateTime testDate = new DateTime(2009, 1, 1, 12, 37, 0);
            string expectedResult = "1230813420";
            string actualResult = UtilityMethods.DateToUnixTimestamp(testDate);

            Assert.AreEqual(expectedResult, actualResult);
        }

        [TestMethod()]
        public void TestUnixTimestampeToDateInvalid()
        {
            string invalidTimestamp = "kjhkjh0987";
            DateTime expectedResult = DateTime.MinValue;
            DateTime actualResult = UtilityMethods.UnixTimestampToDate(invalidTimestamp);

            Assert.AreEqual(expectedResult, actualResult);
        }


        /// <summary>
        ///A test for ExtrasToString (PhotoSearchExtras)
        ///</summary>
        [TestMethod()]
        public void ExtrasToStringTestNoExtras()
        {
            PhotoSearchExtras extras = PhotoSearchExtras.None; // TODO: Initialize to an appropriate value

            string expected = String.Empty;
            string actual;

            actual = FlickrNet.UtilityMethods.ExtrasToString(extras);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ExtrasToString did not return the expected value.");
        }

        [TestMethod()]
        public void ExtrasToStringTestTags()
        {
            PhotoSearchExtras extras = PhotoSearchExtras.Tags; // TODO: Initialize to an appropriate value

            string expected = "tags";
            string actual;

            actual = FlickrNet.UtilityMethods.ExtrasToString(extras);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ExtrasToString did not return the expected value.");
        }

        [TestMethod()]
        public void ExtrasToStringTestMultiple()
        {
            PhotoSearchExtras extras = PhotoSearchExtras.Tags | PhotoSearchExtras.OriginalFormat; // TODO: Initialize to an appropriate value

            string expected = "original_format,tags";
            string actual;

            actual = FlickrNet.UtilityMethods.ExtrasToString(extras);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.ExtrasToString did not return the expected value.");
        }


        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestEmpty()
        {
            string data = String.Empty;

            string expected = String.Empty;
            string actual;

            actual = FlickrNet.UtilityMethods.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestAmpersand()
        {
            string data = "A&B";

            string expected = "A%26B";
            string actual;

            actual = FlickrNet.UtilityMethods.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestPlus()
        {
            string data = "A+B";

            string expected = "A%2BB";
            string actual;

            actual = FlickrNet.UtilityMethods.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for UrlEncode (string)
        ///</summary>
        [TestMethod()]
        public void UrlEncodeTestSpace()
        {
            string data = "A B";

            string expected = "A%20B";
            string actual;

            actual = FlickrNet.UtilityMethods.UrlEncode(data);

            Assert.AreEqual(expected, actual, "FlickrNet.Utils.UrlEncode did not return the expected value.");
        }

        [TestMethod]
        public void ParseDateWithGranularityOK()
        {
            string d = "2010-01-17 12:43:23";
            DateTime d2 = UtilityMethods.ParseDateWithGranularity(d);

            Assert.AreEqual(2010, d2.Year);
            Assert.AreEqual(1, d2.Month);
            Assert.AreEqual(17, d2.Day);
            Assert.AreEqual(12, d2.Hour);
            Assert.AreEqual(43, d2.Minute);
            Assert.AreEqual(23, d2.Second);
        }

        [TestMethod]
        public void ParseDateWithGranularityZeroMonth()
        {
            string d = "2010-00-01 00:00:00";
            DateTime d2 = UtilityMethods.ParseDateWithGranularity(d);

            Assert.AreEqual(2010, d2.Year);
            Assert.AreEqual(1, d2.Month);
            Assert.AreEqual(1, d2.Day);
            Assert.AreEqual(0, d2.Hour);
            Assert.AreEqual(0, d2.Minute);
            Assert.AreEqual(0, d2.Second);
        }
    }
}
