// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FlickrNetTest
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class FlickrNet_UtilsAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::FlickrNet.Utils));
    
    internal FlickrNet_UtilsAccessor(global::FlickrNet.Utils target) : 
            base(target, m_privateType) {
    }
    
    internal static global::System.DateTime unixStartDate {
        get {
            global::System.DateTime ret = ((global::System.DateTime)(m_privateType.GetStaticField("unixStartDate")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("unixStartDate", value);
        }
    }
    
    internal static string photoUrl {
        get {
            string ret = ((string)(m_privateType.GetStaticField("photoUrl")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("photoUrl", value);
        }
    }
    
    internal static global::System.Collections.Hashtable _serializers {
        get {
            global::System.Collections.Hashtable ret = ((global::System.Collections.Hashtable)(m_privateType.GetStaticField("_serializers")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_serializers", value);
        }
    }
    
    internal static global::FlickrNet.Utils CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::FlickrNet.Utils), new System.Type[0], args);
        return ((global::FlickrNet.Utils)(priv_obj.Target));
    }
    
    internal static void WriteInt32(global::System.IO.Stream s, int i) {
        object[] args = new object[] {
                s,
                i};
        m_privateType.InvokeStatic("WriteInt32", new System.Type[] {
                    typeof(global::System.IO.Stream),
                    typeof(int)}, args);
    }
    
    internal static void WriteString(global::System.IO.Stream s, string str) {
        object[] args = new object[] {
                s,
                str};
        m_privateType.InvokeStatic("WriteString", new System.Type[] {
                    typeof(global::System.IO.Stream),
                    typeof(string)}, args);
    }
    
    internal static void WriteAsciiString(global::System.IO.Stream s, string str) {
        object[] args = new object[] {
                s,
                str};
        m_privateType.InvokeStatic("WriteAsciiString", new System.Type[] {
                    typeof(global::System.IO.Stream),
                    typeof(string)}, args);
    }
    
    internal static int ReadInt32(global::System.IO.Stream s) {
        object[] args = new object[] {
                s};
        int ret = ((int)(m_privateType.InvokeStatic("ReadInt32", new System.Type[] {
                    typeof(global::System.IO.Stream)}, args)));
        return ret;
    }
    
    internal static string ReadString(global::System.IO.Stream s) {
        object[] args = new object[] {
                s};
        string ret = ((string)(m_privateType.InvokeStatic("ReadString", new System.Type[] {
                    typeof(global::System.IO.Stream)}, args)));
        return ret;
    }
    
    internal static string ReadAsciiString(global::System.IO.Stream s) {
        object[] args = new object[] {
                s};
        string ret = ((string)(m_privateType.InvokeStatic("ReadAsciiString", new System.Type[] {
                    typeof(global::System.IO.Stream)}, args)));
        return ret;
    }
    
    internal static string UrlFormat(global::FlickrNet.Photo p, string size, string format) {
        object[] args = new object[] {
                p,
                size,
                format};
        string ret = ((string)(m_privateType.InvokeStatic("UrlFormat", new System.Type[] {
                    typeof(global::FlickrNet.Photo),
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static string UrlFormat(global::FlickrNet.PhotoInfo p, string size, string format) {
        object[] args = new object[] {
                p,
                size,
                format};
        string ret = ((string)(m_privateType.InvokeStatic("UrlFormat", new System.Type[] {
                    typeof(global::FlickrNet.PhotoInfo),
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static string UrlFormat(global::FlickrNet.Photoset p, string size, string format) {
        object[] args = new object[] {
                p,
                size,
                format};
        string ret = ((string)(m_privateType.InvokeStatic("UrlFormat", new System.Type[] {
                    typeof(global::FlickrNet.Photoset),
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static string UrlFormat(string format, params object[] parameters) {
        object[] args = new object[] {
                format,
                parameters};
        string ret = ((string)(m_privateType.InvokeStatic("UrlFormat", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeArrayType()}, args)));
        return ret;
    }
    
    internal static global::System.Xml.Serialization.XmlSerializer GetSerializer(global::System.Type type) {
        object[] args = new object[] {
                type};
        global::System.Xml.Serialization.XmlSerializer ret = ((global::System.Xml.Serialization.XmlSerializer)(m_privateType.InvokeStatic("GetSerializer", new System.Type[] {
                    typeof(global::System.Type)}, args)));
        return ret;
    }
    
    internal static global::FlickrNet.Response Deserialize(string responseString) {
        object[] args = new object[] {
                responseString};
        global::FlickrNet.Response ret = ((global::FlickrNet.Response)(m_privateType.InvokeStatic("Deserialize", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static object Deserialize(global::System.Xml.XmlNode node, global::System.Type type) {
        object[] args = new object[] {
                node,
                type};
        object ret = ((object)(m_privateType.InvokeStatic("Deserialize", new System.Type[] {
                    typeof(global::System.Xml.XmlNode),
                    typeof(global::System.Type)}, args)));
        return ret;
    }
    
    internal static global::FlickrNet.MemberType ParseIdToMemberType(string memberTypeId) {
        object[] args = new object[] {
                memberTypeId};
        global::FlickrNet.MemberType ret = ((global::FlickrNet.MemberType)(m_privateType.InvokeStatic("ParseIdToMemberType", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static string MemberTypeToString(global::FlickrNet.MemberType memberTypes) {
        object[] args = new object[] {
                memberTypes};
        string ret = ((string)(m_privateType.InvokeStatic("MemberTypeToString", new System.Type[] {
                    typeof(global::FlickrNet.MemberType)}, args)));
        return ret;
    }
}
}
